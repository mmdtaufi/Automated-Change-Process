name: ServiceNow Change Request Management

on:
  pull_request:
    types: [opened, closed]  # Trigger on both opened and closed events
  push:
    branches:
      - main

jobs:
  manage-change-request:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Determine action (create or update)
      - name: Determine Action
        id: action-determine
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" && "$GITHUB_EVENT_ACTION" == "opened" ]]; then
            echo "action=create"
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" && "$GITHUB_EVENT_ACTION" == "closed" ]]; then
            echo "action=update"
          else
            echo "action=skip"
          fi | tee -a $GITHUB_ENV

      # Step 3: Create Change Request
      - name: Create ServiceNow Change Request
        if: env.action == 'create'
        env:
          SNOW_INSTANCE_URL: ${{ secrets.SNOW_INSTANCE_URL }}
          SNOW_USER: ${{ secrets.SNOW_USER }}
          SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
        run: |
          # Construct the change request data payload
          export DATA='{
            "short_description": "Automated Change Request from GitHub Actions - Qamar",
            "business_service": "Network",
            "service_offering": "Network Management Applications",
            "configuration_items": "Network Router A",
            "assigned_to": "John Doe",
            "description": "New PR in GitHub repository \n '"$GITHUB_REPOSITORY"' \n '"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/pull/$GITHUB_REF"'",
            "u_change_reason": "Automated change triggered by GitHub Actions"
          }'

          # Send a POST request to ServiceNow to create the change request
          curl -X POST "$SNOW_INSTANCE_URL/api/now/table/change_request" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --user "$SNOW_USER:$SNOW_PASSWORD" \
          --data "$DATA" \
          --fail || echo "Failed to create change request"

      # Step 4: Update Change Request
      - name: Update ServiceNow Change Request
        if: env.action == 'update'
        env:
          SNOW_INSTANCE_URL: ${{ secrets.SNOW_INSTANCE_URL }}
          SNOW_USER: ${{ secrets.SNOW_USER }}
          SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
        run: |
          # Define the sys_id of the change request to update (you may replace this with a dynamic lookup if needed)
          CHANGE_REQUEST_SYS_ID="f3d65be5c3f51a104fcd50311501311e"

          # Define the data payload for the update
          DATA='{
            "short_description": "Updated short description - Automated",
            "state": "In Progress",  # Example state update
            "comments": "Additional comments for change request",
            "description": "Update triggered for closed PR"
          }'

          # Send the PUT/PATCH request to ServiceNow API to update the change request
          curl -X PUT "$SNOW_INSTANCE_URL/api/sn_chg_rest/change/$CHANGE_REQUEST_SYS_ID" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --user "$SNOW_USER:$SNOW_PASSWORD" \
          --data "$DATA" \
          --fail || echo "Failed to update the change request in ServiceNow"

      # Optional Step: Handle cases where no action is needed
      - name: Skip Action
        if: env.action == 'skip'
        run: echo "No change request management action is needed for this event."
